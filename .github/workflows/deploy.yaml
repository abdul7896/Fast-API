# .github/workflows/deploy.yaml
name: Prima API CI/CD

on:
  push:
    branches:
      - feature/python-api-server-final

jobs:
  build:
    name: Build Docker Image & Lint Python
    runs-on: ubuntu-latest
    outputs:
      build_tag: ${{ steps.set_tag.outputs.build_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies + flake8 + bandit
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt flake8 bandit

      - name: Run Python Lint (flake8)
        run: flake8 app tests

      - name: Run Security Scan (bandit)
        run: bandit -r app

      - name: Set build tag for Docker image
        id: set_tag
        run: |
          BUILD_TAG=dev-$(date +'%Y%m%d')-$(git rev-parse --short HEAD)
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          echo "::set-output name=build_tag::${BUILD_TAG}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: abz7896/prima-api:${{ env.BUILD_TAG }}

  terraform:
    name: Terraform Format, Init & Apply
    runs-on: ubuntu-latest
    needs: build
    environment: release
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform CLI v1.8.5
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      - name: Terraform format check
        run: |
          cd terraform
          terraform fmt -check

      - name: Terraform init
        run: |
          cd terraform
          terraform init

      - name: Terraform apply (auto-approve)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd terraform
          terraform apply -auto-approve

      - name: Output Terraform state info
        run: |
          cd terraform
          terraform output -json > ../terraform.json
          cat ../terraform.json

  tests:
    name: Run Unit and Integration Tests
    runs-on: ubuntu-latest
    needs: terraform
    env:
      API_KEY: ${{ secrets.API_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest (unit + integration)
        run: pytest --maxfail=3 --disable-warnings -q

  helm_lint:
    name: Helm Chart Linting
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Helm CLI v3.11.3
        uses: azure/setup-helm@v3
        with:
          version: v3.11.3

      - name: Helm lint
        run: helm lint ./helm

  deploy-dev:
    name: Manual Approval & Deploy to Dev
    runs-on: ubuntu-latest
    needs: [tests, helm_lint]
    environment: dev
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge feature branch into dev
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git fetch origin
          git checkout dev
          git merge origin/feature/python-api-server-final --no-edit --allow-unrelated-histories
          git push origin dev

  deploy-release:
    name: Manual Approval & Deploy to Release
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: ${{ needs.deploy-dev.result == 'success' }}
    environment: release
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge dev into release
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git fetch origin
          git checkout release
          git merge origin/dev --no-edit --allow-unrelated-histories
          git push origin release

  deploy-main:
    name: Manual Approval & Deploy to Main
    runs-on: ubuntu-latest
    needs: deploy-release
    if: ${{ needs.deploy-release.result == 'success' }}
    environment: main
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge release into main
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git fetch origin
          git checkout main
          git merge origin/release --no-edit --allow-unrelated-histories
          git push origin main
