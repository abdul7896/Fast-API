name: Full CI/CD Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  build-test-push-deploy:
    runs-on: self-hosted

    env:
      IMAGE: yourdockeruser/prima-api

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit flake8

      - name: Run Bandit security scan
        run: |
          bandit -r app/ || exit 1

      - name: Run Flake8 linting
        run: |
          flake8 app/ || exit 1

      - name: Run tests with pytest
        run: |
          pytest tests/ || exit 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Define Docker tag
        id: vars
        run: |
          # Replace '/' with '-' in branch/tag name for Docker tags
          TAG=$(echo "${GITHUB_REF##*/}" | tr '/' '-')
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE }}:${{ steps.vars.outputs.tag }} .

      - name: Scan Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE }}:${{ steps.vars.outputs.tag }}
          format: 'table'
          exit-code: '1'    # fail if vulnerabilities found
          ignore-unfixed: true

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE }}:${{ steps.vars.outputs.tag }}

      - name: Load Docker image to local kind (optional, fallback)
        run: |
          kind load docker-image ${{ env.IMAGE }}:${{ steps.vars.outputs.tag }} || true

      - name: Deploy to local Kubernetes
        run: |
          kubectl set image deployment/prima-api prima-api=${{ env.IMAGE }}:${{ steps.vars.outputs.tag }} || true
          kubectl rollout restart deployment/prima-api || true
