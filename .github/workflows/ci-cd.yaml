name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create and activate venv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install linters
        run: |
          pip install --upgrade pip
          pip install flake8 mypy bandit safety black isort

      - name: Run Black
        run: black --check app/ tests/
        continue-on-error: true

      - name: Run Isort
        run: isort --check-only app/ tests/
        continue-on-error: true

      - name: Run Flake8
        run: flake8 app/ tests/
        continue-on-error: true

      - name: Run Bandit
        run: bandit -r app/ --severity-level high

      - name: Run Mypy
        run: mypy app/
        continue-on-error: true

      - name: Run Safety
        run: |
          pip install -r requirements.txt
          safety check --key=${{ secrets.SAFETY_API_KEY }}

  iac-scanning:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Checkov
        run: pip install checkov
        

      - name: Run Checkov
        run: |
          checkov -d . --output --output-file-path iac_checkov_report
        continue-on-error: true

      - name: Upload Checkov Report
        uses: actions/upload-artifact@v4
        with:
          name: iac-checkov
          path: iac_checkov_report.*
        continue-on-error: true

      - name: Install TFLint
        run: |
          curl -sL https://raw.githubusercontent.com/terraform-linters/tflint/master/install.sh | bash

      - name: Install TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          version: "latest"  

      - name: Run TFLint
        run: tflint --recursive
        continue-on-error: true

      - name: Install Terrascan
        run: |
          curl -sL https://raw.githubusercontent.com/tenable/terrascan/master/install.sh | bash -s -- -b /usr/local/bin
          chmod +x terrascan
          sudo mv terrascan /usr/local/bin/

      - name: Run Terrascan
        run: terrascan scan -t terraform -i tfplan -o sarif > terrascan-report.sarif || true
        continue-on-error: true

      - name: Upload Terrascan Report
        uses: actions/upload-artifact@v4
        with:
          name: iac-terrascan
          path: terrascan-report.sarif
        continue-on-error: true

  test-suite:
    runs-on: self-hosted
    needs: lint
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Create and activate venv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt pytest pytest-cov moto locust

      - name: Run Unit Tests
        run: pytest tests/unit -v --cov=app --cov-report=xml

      - name: Run Integration Tests
        run: pytest tests/integration -v --cov=app --cov-append

      - name: Run Security Tests
        run: pytest tests/security -v || true

      - name: Run Validation Tests
        run: pytest tests/validation -v || true

      - name: Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  performance-tests:
    runs-on: self-hosted
    needs: test-suite
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Create and activate venv
        run: |
          python -m venv .venv
          source .venv/bin/activate
          echo "VIRTUAL_ENV=$PWD/.venv" >> $GITHUB_ENV
          echo "$PWD/.venv/bin" >> $GITHUB_PATH

      - name: Install Locust
        run: pip install locust

      - name: Run Load Test
        run: |
          locust -f tests/performance/test_load.py --headless \
            -u 100 -r 10 -t 30s \
            --csv=load_test_results \
            --html=load_test_report.html

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: load-test-results
          path: |
            load_test_results*
            load_test_report.html

  deploy:
    runs-on: self-hosted
    needs: [test-suite, performance-tests]
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            abz7896/prima-api:${{ github.sha }}
            abz7896/prima-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/prima-api \
            prima-api=abz7896/prima-api:${{ github.sha }}
          kubectl rollout status deployment/prima-api --timeout=90s

      - name: Slack Notification
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel: '#alerts'
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}