# .github/workflows/ci-cd.yaml
name: CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']
  workflow_dispatch:

env:
  TERRAFORM_DIR: infra  # adjust if your .tf files live elsewhere

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install linting tools
        run: |
          pip install flake8 mypy bandit safety black isort
      - run: black --check app/ tests/
      - run: isort --check-only app/ tests/
      - run: flake8 app/ tests/
      - name: Type & security checks
        run: |
          bandit -r app/ --severity-level high
          mypy app/ || true
          pip install -r requirements.txt
          safety check --key=${{ secrets.SAFETY_API_KEY }}

  iac-scanning:
    runs-on: self-hosted
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Install Checkov
        run: pip install checkov
      - name: Run Checkov
        run: checkov -d "${{ env.TERRAFORM_DIR }}" --output-file-path=iac_checkov_report.json
      - uses: actions/upload-artifact@v4
        with:
          name: checkov-report
          path: iac_checkov_report.json

      - name: Install TFLint
        run: curl -sL https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
      - name: Run TFLint
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: tflint --init && tflint --recursive --call-module-type local

      - name: Install Terrascan
        run: |
          curl -L https://github.com/tenable/terrascan/releases/latest/download/terrascan_$(uname)_amd64.tar.gz | tar xz
          chmod +x terrascan && sudo mv terrascan /usr/local/bin/
      - name: Run Terrascan
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: terrascan scan -t terraform -i . -o sarif > terrascan-report.sarif || true
      - uses: actions/upload-artifact@v4
        with:
          name: terrascan-report
          path: terrascan-report.sarif

  test-suite:
    runs-on: self-hosted
    needs: iac-scanning
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov moto locust

      - name: Run all tests w/ coverage
        run: |
          pytest tests/unit tests/integration tests/security tests/validation --cov=app --cov-report=xml
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

  performance-tests:
    runs-on: self-hosted
    needs: test-suite
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4

      - name: Setup Locust
        run: pip install locust

      - name: Run Load Test
        run: |
          locust -f tests/performance/test_load.py --headless \
            -u 100 -r 10 -t 30s \
            --csv=load_test_results \
            --html=load_test_report.html
      - uses: actions/upload-artifact@v4
        with:
          name: load-test-report
          path: |
            load_test_results*
            load_test_report.html

  deploy:
    runs-on: self-hosted
    needs: [test-suite, performance-tests]
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Docker Build & Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            yourdockerhubuser/prima-api:${{ github.sha }}
            yourdockerhubuser/prima-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Kubernetes
        run: |
          kubectl set image deployment/prima-api \
            prima-api=yourdockerhubuser/prima-api:${{ github.sha }}
          kubectl rollout status deployment/prima-api --timeout=90s

      - name: Slack Notification
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel: '#alerts'
          status: ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
