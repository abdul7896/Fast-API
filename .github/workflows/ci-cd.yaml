# name: CI/CD Pipeline

# on:
#   push:
#     branches: [ main, feature/** ]
#     # paths: [ 'app/**', 'tests/**', 'requirements.txt', 'Dockerfile' ]
#     paths: []
#   pull_request:
#     branches: [ main ]

name: CI

on:
  push:
    branches:
      - '**'  # matches all branches
  pull_request:
    branches:
      - '**'  # also for PRs from any branch
  workflow_dispatch:


concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install linters and formatters
        run: |
          pip install flake8 mypy bandit safety black isort

      - name: Run Black (Check formatting)
        run: black --check app/ tests/

      - name: Run Isort (Check imports sorting)
        run: isort --check-only app/ tests/

      - name: Run Flake8 (Linting)
        run: flake8 app/ tests/
        continue-on-error: true

      - name: Run Bandit (Security static analysis)
        run: bandit -r app/ --severity-level high

      - name: Run Mypy (Type Checking)
        run: mypy app/
        continue-on-error: true

      - name: Run Safety (Dependency vulnerability scan)
        run: |
          pip install -r requirements.txt
          safety scan

  test-suite:
    runs-on: self-hosted
    needs: lint
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov moto locust

      - name: Run Unit Tests
        run: PYTHONPATH=$(pwd) pytest tests/unit -v

      - name: Run Integration Tests
        run: PYTHONPATH=$(pwd) pytest tests/integration -v

      - name: Run Security & Validation Tests
        run: |
          PYTHONPATH=$(pwd) pytest tests/security -v
          PYTHONPATH=$(pwd) pytest tests/validation -v || true

      - name: Upload Coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: coverage.xml

  performance-tests:
    runs-on: self-hosted
    needs: test-suite
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Locust
        run: pip install locust

      - name: Run Load Test
        run: |
          locust -f tests/performance/test_load.py --headless \
            -u 100 -r 10 -t 1m \
            --csv=load_test_results

      - name: Upload Load Test Results
        uses: actions/upload-artifact@v3
        with:
          name: load-test-results
          path: load_test_results*.csv

  build-deploy-local-k8s:
    runs-on: self-hosted
    needs: [ test-suite, performance-tests ]
    environment: staging
    steps:
      - uses: actions/checkout@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          TAG=${GITHUB_SHA:0:7}
          docker build -t prima-api:$TAG .

      - name: Scan Image with Trivy
        uses: aquasecurity/trivy-action@v0.16.1
        with:
          image-ref: prima-api:${{ github.sha }}
          format: table
          exit-code: 0          # do not fail pipeline on vuln, just warn
          ignore-unfixed: true
          vuln-type: os,library

      - name: Tag and Save Image
        run: |
          TAG=${GITHUB_SHA:0:7}
          docker tag prima-api:$TAG localhost:5000/prima-api:$TAG
          docker save prima-api:$TAG | gzip > prima-api.tar.gz

      - name: Load Image into Local Cluster
        run: |
          TAG=${GITHUB_SHA:0:7}
          kind load docker-image prima-api:$TAG --name=kind-cluster-name  
          kubectl set image deployment/prima-api prima-api=prima-api:$TAG
          kubectl rollout status deployment/prima-api --timeout=90s

      - name: Restart Deployment
        if: ${{ github.ref != 'refs/heads/main' }}
        run: kubectl rollout restart deployment/prima-api

      - name: Push to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          TAG=${GITHUB_SHA:0:7}
          echo ${{ secrets.DOCKER_HUB_PASSWORD }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
          docker tag prima-api:$TAG yourdockerhubuser/prima-api:$TAG
          docker push yourdockerhubuser/prima-api:$TAG

      - name: Slack Notification
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#FF0000'
          SLACK_TITLE: "Pipeline Failed"
          SLACK_MESSAGE: "Check the GitHub Actions run here: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
